Object subclass: #TreeCollector	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos 2-TP 3 - Ej 01'!!TreeCollector methodsFor: 'accessing' stamp: 'CristianBarbaro 4/30/2015 15:31'!block: aBlock 	block := aBlock! !!TreeCollector methodsFor: 'accessing' stamp: 'CristianBarbaro 4/30/2015 15:31'!block	^ block! !!TreeCollector methodsFor: 'public interface' stamp: 'CristianBarbaro 4/30/2015 15:25'!preOrderCollect: aTree	| result |	result:= OrderedCollection new.	self preOrderCollect: aTree with: result.	^result! !!TreeCollector methodsFor: 'public interface' stamp: 'CristianBarbaro 4/30/2015 15:46'!postOrderCollect: aTree	| result |	result:= OrderedCollection new.	self postOrderCollect: aTree with: result.	^result! !!TreeCollector methodsFor: 'public interface' stamp: 'CristianBarbaro 4/30/2015 15:46'!inOrderCollect: aTree	| result |	result:= OrderedCollection new.	self inOrderCollect: aTree with: result.	^result! !!TreeCollector methodsFor: 'public interface' stamp: 'CristianBarbaro 5/7/2015 14:10'!postOrderCollect: aTree with: result	aTree children do: [ :subtree | self postOrderCollect: subtree with: result ].	result add: (self block value: aTree)! !!TreeCollector methodsFor: 'public interface' stamp: 'CristianBarbaro 5/7/2015 14:10'!preOrderCollect: aTree with: result	result add: (self block value: aTree). "Evalúo el nodo actual y le pido el nombre de todos sus hijos y los guardo en result."	aTree children do: [ :subtree | self preOrderCollect: subtree with: result ] "Para cada uno de los hijos llamo a este método recursivamente, y trabajo con cada uno de los subarboles."! !!TreeCollector methodsFor: 'public interface' stamp: 'CristianBarbaro 5/7/2015 15:03'!inOrderCollect: aTree with: result	aTree children isEmpty		ifFalse: [ 			self inOrderCollect: aTree children first with: result.			result add: (self block value: aTree).			aTree children allButFirstDo: [ :subtree | self inOrderCollect: subtree with: result ] ]		ifTrue: [ result add: (self block value: aTree) ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TreeCollector class	instanceVariableNames: ''!!TreeCollector class methodsFor: 'construction' stamp: 'CristianBarbaro 4/30/2015 15:54'!block: aBlock	^ self new block: aBlock! !Object subclass: #ObjectAdapter	instanceVariableNames: 'objectClass'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos 2-TP 3 - Ej 01'!!ObjectAdapter methodsFor: 'utils' stamp: 'CristianBarbaro 5/7/2015 15:37'!children	^ self objectClass subclasses collect: [ :each | ObjectAdapter new objectClass: each ]! !!ObjectAdapter methodsFor: 'accessing' stamp: 'CristianBarbaro 5/7/2015 15:31'!objectClass: anObjectClass	objectClass := anObjectClass! !!ObjectAdapter methodsFor: 'accessing' stamp: 'CristianBarbaro 5/7/2015 15:31'!objectClass	^ objectClass! !!ObjectAdapter methodsFor: 'accessing' stamp: 'CristianBarbaro 5/7/2015 16:00'!name	^ self objectClass ! !Object subclass: #MockTree	instanceVariableNames: 'number name children'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos 2-TP 3 - Ej 01'!!MockTree methodsFor: 'utils' stamp: 'CristianBarbaro 5/7/2015 14:28'!fileName	^ number! !!MockTree methodsFor: 'utils' stamp: 'CristianBarbaro 5/7/2015 14:13'!addChildren: aChildren	self children add: aChildren! !!MockTree methodsFor: 'accessing' stamp: 'CristianBarbaro 5/7/2015 14:23'!number: anObject	number := anObject! !!MockTree methodsFor: 'accessing' stamp: 'CristianBarbaro 5/7/2015 14:24'!children: anObject	children := anObject! !!MockTree methodsFor: 'accessing' stamp: 'CristianBarbaro 5/7/2015 14:23'!number	^ number! !!MockTree methodsFor: 'accessing' stamp: 'CristianBarbaro 5/7/2015 14:23'!name: anObject	name := anObject! !!MockTree methodsFor: 'accessing' stamp: 'CristianBarbaro 5/7/2015 14:23'!children	^ children! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MockTree class	instanceVariableNames: ''!!MockTree class methodsFor: 'construction' stamp: 'CristianBarbaro 5/7/2015 14:25'!newWithCollection: aCollection	^ self new children: aCollection! !TestCase subclass: #TreeCollectorTest	instanceVariableNames: 'mockTree tc coll coll2 coll3'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos 2-TP 3 - Ej 01'!!TreeCollectorTest methodsFor: 'testing' stamp: 'CristianBarbaro 4/30/2015 16:21'!testPreOrderCollect	! !!TreeCollectorTest methodsFor: 'setUp' stamp: 'CristianBarbaro 4/30/2015 16:20'!setUp	tc := TreeCollector block: [ :each | each ].	coll := OrderedCollection new.	coll2 := OrderedCollection new.	coll3 := OrderedCollection new.	coll add: 3; add: 2; add: 6; add: 1; add: coll2; add: coll3.	coll2 add: 12; add: 14; add: 4.	coll3 add: 35; add: 27; add: 46.		! !